#### R Tutorial for LISA Shortcourses ####
##########################################

##########################################
# 4: RandomNumbers/Loops/Logic/Functions #
##########################################

##### Example 4.1.1: Random Uniforms #####
##########################################

# I know many of you work with data from the real world.
# However sometimes to understand a process, simulations on fake data are needed.
# Also, many people interested in doing analysis in a Bayesian paradigm will need to generate random variables for their samplers.

# Let's look at the function that generates random uniforms.

?runif

# Notice the other related functions.

# Let's generate 1000000 random numbers from the continuous uniform(0,1)

u<-runif(1000000, min=0, max=1)
hist(u)

## Example 4.1.2: How I Generated DATA ###
##########################################

# The dataset we have been using this whole time we called DATA was using these functions.
# Let's see how I did it:

# First I generated 100 observations of the regressors.

X1<-rnorm(100, mean=20, sd = 3)
X2<-rnorm(100, mean=15, sd = 2.5)
X3<-rnorm(100, mean=10, sd = 3)
X4<-rnorm(100, mean=22, sd = 3.5)

# cbind() or "column bind," binds column vectors of the same size together.

X<-cbind(X1,X2,X3,X4)

# Then I picked the true values of my regression coefficients.

Betas<-c(1, 3, 2.5, 5)

# To get the Y's, I used the standard regression model:

Y<-X%*%Betas+rnorm(100, mean=0, sd=5)

# Please note that I didn't not include an intercept in my generation.

DATA<-cbind(Y, X)

# Then I named each of the columns using the colnames() function.
colnames(DATA)<-c("Y", "X1", "X2", "X3", "X4")

# Example 4.2.1: Saving Graphs in a Loop #
##########################################

# Suppose we have a lot of variables.

L<-matrix(0,nrow=100,ncol=100)
mu<-rbinom(100, size=5, prob=.5)

for(i in 1:100){
	L[,i]<-rnorm(100,mean=mu[i],sd=1)
}

# I want to see how many of these look normal distributed.  I could do a qq plot on each,
# However there are 100 of them so will would be very annoying to do that.
# Let's use our loops to make it easy.
# I am going to use i as my indexing variable.
# I am going to start the index at the number 1 and end at 100.
# The curly brackets tell R what is in the loop, since R normally runs a line at a time. 

pdf(file="C:/Nels/School files/Grad School/Spring 09/Consulting/Short Course/PDFex4.pdf")
for(i in 1:100){
	qqnorm(L[,i])
	qqline(L[,i])
}
dev.off()

###### Example 4.3.1: Simple Recode ######
##########################################

# Here's some data:

Z<-rnorm(10000,mean=0,sd=1) 

hist(Z)

# So we may have to recode our data to fit that.
# We are going to code everything bigger than 3 as 3 and everything less than -3 as -3

for(i in 1:10000){
	if(Z[i] > 3) Z[i]<-3 else if(Z[i] < -3) Z[i]<--3
}

win.graph()
hist(Z)

### Example 4.3.2: Overlapping Circles ###
##########################################

# Here's some more data:
x<-runif(5000,0,5)
y<-runif(5000,0,5)

# This example is a little more advanced.  It illustrates how to use a loop to find overlapping areas of circles,
# by randomly generating uniform randomvariables, as well as "and" and "or" statements.

z<-matrix(0,ncol=1, nrow=5000) 

for(i in 1:5000){
	if ( ((x[i]-2)^2+(y[i]-3)^2 < 1 && (x[i]-3)^2+(y[i]-3)^2 < 1) || (x[i]-3)^2+(y[i]-3)^2 < 1 && (x[i]-4)^2+(y[i]-3)^2 < 1) z[i]<-1
}

# Let's import a 3d scatterplotting function.
library(scatterplot3d)

# Now let's look at the pretty picture.
scatterplot3d(z ~ x * y , pch=20)


##### Example 4.4.1: A Fast Function #####
##########################################

# Sometimes we may want to automate a process that we may want to do multiple times
# into a function we can access readily.
# return() tells R what the function outputs. Functions can only output one object, so use a list()
# when you need to output more.

basic<-function(X){

	mu<-mean(X)
	sig2<-var(X)
	med<-median(X)
	top<-max(X)
	bot<-min(X)

	out<-list(mu,sig2,med,top,bot)

return(out)
}

# After you have run the code for your function, simple enter the appropriate arguments
# and observe the result.

basic(Z)
